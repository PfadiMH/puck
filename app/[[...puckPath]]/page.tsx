/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Puck. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getDocument`) for a Puck page
 * and render it using <Render>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/puck/route.ts
 */

import PageRender from "@components/page/PageRender";
import { footerConfig } from "@lib/config/footer.config";
import { pageConfig } from "@lib/config/page.config";
import { getDocument, getFooter, getNavbar } from "@lib/db/database";
import { Metadata } from "next";
import { notFound } from "next/navigation";

type Params = Promise<{ puckPath: string[] }>;

export async function generateMetadata({
  params,
}: {
  params: Params;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const page = await getDocument(path);

  if (!page) {
    return {};
  }

  return {
    title: page.root.props?.title || "Pfadi Meilen Herrliberg",
  };
}

export default async function Page({ params }: { params: Params }) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const document = await getDocument(path);

  if (!document) {
    return notFound();
  }

  const navbarData = await getNavbar();
  const footerData = await getFooter();

  return (
    <PageRender
      {...{
        navbarData,
        document,
        footerData,
        pageConfig,
        footerConfig,
      }}
    />
  );
}
